import re

def toSnakeCase(string):
    string = re.sub(r'(?<=[a-z])(?=[A-Z])|[^a-zA-Z]', ' ', string).strip().replace(' ', '_')
    return ''.join(string.lower())

def str_to_numeric(data,col, dtype):
    df_tmp = pd.DataFrame(data)
    # Replace non-numeric characters with an empty string
    df_tmp[col] = df_tmp[col].replace({'[^0-9.]': ''}, regex=True)
    # Replace remaining empty strings with NaN
    df_tmp[col] = df_tmp[col].replace({'': np.nan})
    # Convert the column to float
    df_tmp[col] = df_tmp[col].astype(dtype)

    return df_tmp[col]

if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here
    columns_dtypes = {
            'Index Name': 'str',
            'Index Date': 'datetime64[ns]',
            'Open Index Value': 'float64',
            'High Index Value': 'float64',
            'Low Index Value': 'float64',
            'Closing Index Value': 'float64',
            'Points Change': 'float64',
            'Change(%)': 'float64',
            'Volume': 'Int64',
            'Turnover (Rs. Cr.)': 'str',
            'P/E': 'str',
            'P/B': 'str',
            'Div Yield': 'str',
        }
    for col,data_type in columns_dtypes.items():
            if data_type in ('float64','Int64'):
                bci_df[col] = str_to_numeric(bci_df,col,data_type)
        data = bci_df.astype(dtype= columns_dtypes)

    old_columns = list(data.columns.values)
    new_columns = [toSnakeCase(column) for column in old_columns]
    data.columns = new_columns

    return data


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
